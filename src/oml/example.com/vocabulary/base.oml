@dc:title "Base Vocabulary"
vocabulary<http://example.com/vocabulary/base#> as base {

 	extends <http://purl.org/dc/elements/1.1/> as dc

	extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs

	extends <http://www.w3.org/2001/XMLSchema#> as xsd

	@rdfs:label "IdentifiedThing"
	@dc:^description """An [=IdentifiedThing=] is a thing with identity and identifying properties."""
	aspect IdentifiedThing [
		key hasIdentifier
	]

	@rdfs:label "hasCanonicalName"
	scalar property hasCanonicalName [
		domain IdentifiedThing
		range xsd:string
	]

	@rdfs:label "hasIdentifier"
	scalar property hasIdentifier [
		domain IdentifiedThing
		range xsd:string
		functional
	]

	@rdfs:label "hasDescription"
	scalar property hasDescription [
		domain IdentifiedThing
		range xsd:string
	]

 	@rdfs:label "AggregatedElement"
	@dc:^description """An [=AggregatedElement=] is a thing that can participate in homeomeric aggregation relationships."""
	aspect AggregatedElement

	@rdfs:label "Aggregates"
	@dc:^description """[=aggregates=] is a many-to-many relation used
	to represent homeomeric relations that form directed acyclic graphs."""
    relation entity Aggregates [
		from AggregatedElement
    	to AggregatedElement
    	forward aggregates
    	reverse isAggregatedIn
    	asymmetric
    	irreflexive
	]

 	@rdfs:label "ContainedElement"
	@dc:^description """A [=ContainedElement=] is a thing that can participate in homeomeric containment relationships."""
	aspect ContainedElement

	@rdfs:label "Contains"
	@dc:^description """[=contains=] is a many-to-many relation used
	to represent homeomeric relations that form directed rooted trees."""
	relation entity Contains [
		from ContainedElement
    	to ContainedElement
		forward contains
		@rdfs:label "is contained in"
		reverse isContainedIn
		inverse functional
		asymmetric
		irreflexive
	]

}
